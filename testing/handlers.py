import random
from datetime import datetime
from telethon import events, Button
from utils.database import SessionLocal
from testing.test_logic import get_test_categories, get_random_question
from testing.models import TestCategory, Test, Question, Answer, UserTestSession, UserAnswer
from auth.models import User
from sqlalchemy import func

MAX_QUESTIONS_PER_TEST = 3

async def setup_testing_handlers(bot_client):
    @bot_client.on(events.NewMessage(pattern='üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è'))
    async def testing_menu(event):
        categories = get_test_categories()
        if not categories:
            await event.reply("üòï –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–µ—Å—Ç—É.")
            return
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ inline –∫–Ω–æ–ø–∫–∏, —â–æ–± –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –æ–¥—Ä–∞–∑—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ callback_data
        buttons = [[Button.inline(cat.name, data=f"category_{cat.id}")] for cat in categories]
        await event.reply("üìö –û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:", buttons=buttons)

    @bot_client.on(events.CallbackQuery(pattern=r"^category_(\d+)$"))
    async def handle_category_selection(event):
        category_id = int(event.data.decode('utf-8').split('_')[1])
        
        session = SessionLocal()
        category = session.query(TestCategory).filter(TestCategory.id == category_id).first()
        session.close()

        if not category:
            await event.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        await event.delete()

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ category_id –≤ data –¥–ª—è callback (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, starttest_5)
        buttons = [
            [Button.inline("‚úÖ –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è", data=f"starttest_{category.id}")],
            [Button.inline("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥", data="go_back_to_categories")]
        ]

        await bot_client.send_message(
            event.chat_id,
            f"üìö –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: **{category.name}**\n\n–ì–æ—Ç–æ–≤—ñ –ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç?",
            buttons=buttons,
            parse_mode='markdown'
        )

    @bot_client.on(events.CallbackQuery(pattern=r"^go_back_to_categories$"))
    async def go_back_to_categories(event):
        await event.delete()

        categories = get_test_categories()
        if not categories:
            await bot_client.send_message(event.chat_id, "üòï –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–µ—Å—Ç—É.")
            return

        buttons = [[Button.inline(cat.name, data=f"category_{cat.id}")] for cat in categories]
        await bot_client.send_message(event.chat_id, "üìö –û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:", buttons=buttons)


    # @bot_client.on(events.CallbackQuery(pattern=r"^category_(\d+)$"))
    # async def handle_category_inline_selection(event):
    #     # –û—Ç—Ä–∏–º—É—î–º–æ id –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ callback_data
    #     category_id = int(event.data.decode('utf-8').split('_')[1])
    #     session = SessionLocal()
    #     category = session.query(TestCategory).filter(TestCategory.id == category_id).first()
    #     if category:
    #         tests = session.query(Test).filter(Test.category_id == category.id).all()
    #         if not tests:
    #             await event.answer("üòï –í –æ–±—Ä–∞–Ω—ñ–π —Ç–µ–º—ñ –Ω–µ–º–∞—î —Ç–µ—Å—Ç—ñ–≤.")
    #             session.close()
    #             return
    #         test = random.choice(tests)
    #         question = get_random_question(test.id)
    #         if question:
    #             await event.delete()  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    #             # –°—Ç–≤–æ—Ä—é—î–º–æ inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    #             buttons = [
    #                 [Button.inline(ans.answer_text, data=f"answer_{ans.id}")]
    #                 for ans in question.answers
    #             ]
    #             await bot_client.send_message(
    #                 event.chat_id,
    #                 f"‚ùì {question.question_text}",
    #                 buttons=buttons
    #             )
    #         else:
    #             await event.answer("üòï –í —Ç–µ—Å—Ç—ñ –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å.")
    #     else:
    #         await event.answer("üòï –ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    #     session.close()
    
    @bot_client.on(events.CallbackQuery(pattern=r"^answer_(\d+)$"))
    async def handle_answer(event):
        answer_id = int(event.data.decode('utf-8').split('_')[1])
        session = SessionLocal()
        answer = session.query(Answer).filter(Answer.id == answer_id).first()
        if answer:
            if answer.is_correct:
                await event.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                await bot_client.send_message(
                    event.chat_id,
                    f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {answer.answer_text}"
                )
            else:
                correct_answer = session.query(Answer).filter(
                    Answer.question_id == answer.question_id,
                    Answer.is_correct == True
                ).first()
                correct_text = correct_answer.answer_text if correct_answer else "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                await event.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                await bot_client.send_message(
                    event.chat_id,
                    f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–∏ –æ–±—Ä–∞–ª–∏: {answer.answer_text}\n"
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_text}"
                )
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
            await bot_client.send_message(
                event.chat_id,
                "–ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?",
                buttons=[Button.inline("–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è", data="next_question")]
            )
        session.close()
    
    @bot_client.on(events.CallbackQuery(pattern=r"^next_question$"))
    async def handle_next_question(event):
        await event.delete()
        categories = get_test_categories()
        category_buttons = [[Button.inline(cat.name, data=f"category_{cat.id}")]
                            for cat in categories]
        category_buttons.append([Button.inline("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", data="go_main_menu")])
        await bot_client.send_message(
            event.chat_id,
            "üìö –í–∏–±–µ—Ä—ñ—Ç—å –∑ –º–µ–Ω—é —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:",
            buttons=category_buttons
        )
    

    @bot_client.on(events.CallbackQuery(pattern=r"^starttest_(\d+)$"))
    async def handle_start_test(event):
        category_id = int(event.data.decode('utf-8').split('_')[1])
        telegram_id = event.sender_id

        session = SessionLocal()
        user = session.query(User).filter(User.telegram_id == telegram_id).first()
        if not user:
            await event.answer("‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
            session.close()
            return

        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        unfinished_sessions = session.query(UserTestSession).join(Test).filter(
            UserTestSession.user_id == user.id,
            UserTestSession.completed_at.is_(None),
            Test.category_id == category_id
        ).all()
        for s in unfinished_sessions:
            session.query(UserAnswer).filter(UserAnswer.session_id == s.id).delete()
            session.delete(s)
        session.commit()

        # –û–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–µ—Å—Ç –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        test = session.query(Test).filter(Test.category_id == category_id).order_by(func.rand()).first()
        if not test:
            await event.answer("‚ùå –í —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î —Ç–µ—Å—Ç—ñ–≤.")
            session.close()
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–µ—Å—ñ—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É
        previous_best = session.query(UserTestSession).filter(
            UserTestSession.user_id == user.id,
            UserTestSession.test_id == test.id,
            UserTestSession.completed_at.isnot(None)
        ).order_by(UserTestSession.score.desc()).first()

        if previous_best and previous_best.score is not None:
            await bot_client.send_message(
                event.chat_id,
                f"üîÅ –í–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ü–µ–π —Ç–µ—Å—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: {previous_best.score}%). –¶–µ –±—É–¥–µ –ø–æ–≤—Ç–æ—Ä–Ω–µ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è.\n"
                f"üéØ –Ø–∫—â–æ –ø–æ–∫—Ä–∞—â–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ–≤–∏–π –±—É–¥–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ."
            )

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é
        test_session = UserTestSession(
            user_id=user.id,
            test_id=test.id,
            started_at=datetime.utcnow()
        )
        session.add(test_session)
        session.commit()

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è
        question = get_random_question(test.id)
        if not question:
            await bot_client.send_message(event.chat_id, "‚ùå –£ —Ü—å–æ–º—É —Ç–µ—Å—Ç—ñ –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å.")
            session.close()
            return

        buttons = [
            [Button.inline(ans.answer_text, data=f"ans_{test_session.id}_{question.id}_{ans.id}")]
            for ans in question.answers
        ]

        await event.delete()
        await bot_client.send_message(
            event.chat_id,
            f"‚ùì {question.question_text}",
            buttons=buttons
        )

        session.close()


    @bot_client.on(events.CallbackQuery(pattern=r"^ans_(\d+)_(\d+)_(\d+)$"))
    async def handle_user_answer(event):
        session_id, question_id, answer_id = map(int, event.data.decode('utf-8').split('_')[1:])
        session = SessionLocal()

        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è —É —Ü—ñ–π —Å–µ—Å—ñ—ó
            already_answered = session.query(UserAnswer).filter_by(
                session_id=session_id, question_id=question_id
            ).first()
            if already_answered:
                await event.answer("‚ùó –í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è.")
                return

            answer = session.query(Answer).filter(Answer.id == answer_id).first()
            if not answer:
                await event.answer("‚ùå –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
                return

            is_correct = answer.is_correct
            session.add(UserAnswer(
                session_id=session_id,
                question_id=question_id,
                answer_id=answer.id,
                is_correct=is_correct
            ))
            session.commit()

            feedback = (
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {answer.answer_text}"
                if is_correct else
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–∏ –æ–±—Ä–∞–ª–∏: {answer.answer_text}\n"
                f"‚úîÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {session.query(Answer).filter_by(question_id=question_id, is_correct=True).first().answer_text}"
            )

            await event.answer("‚úîÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏–π–Ω—è—Ç–∞")
            await event.delete()
            await bot_client.send_message(event.chat_id, feedback)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            answered_count = session.query(UserAnswer).filter_by(session_id=session_id).count()

            if answered_count >= MAX_QUESTIONS_PER_TEST:
                await bot_client.send_message(
                    event.chat_id,
                    "üéâ –í–∏ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ –≤—Å—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è! –©–æ —Ä–æ–±–∏–º–æ –¥–∞–ª—ñ?",
                    buttons=[
                        [Button.inline("üíæ –ó–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç", data=f"finalize_{session_id}")],
                        [Button.inline("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", data="go_main_menu")]
                    ]
                )
                return

            # –í–∏–±–∏—Ä–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
            current_session = session.query(UserTestSession).filter_by(id=session_id).first()
            answered_ids = session.query(UserAnswer.question_id).filter_by(session_id=session_id).all()
            answered_ids = [row[0] for row in answered_ids]

            remaining_questions = session.query(Question).filter(
                Question.test_id == current_session.test_id,
                ~Question.id.in_(answered_ids)
            ).all()

            if not remaining_questions:
                await bot_client.send_message(
                    event.chat_id,
                    "üõë –ë—ñ–ª—å—à–µ –ø–∏—Ç–∞–Ω—å –Ω–µ–º–∞—î. –ë–∞–∂–∞—î—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç?",
                    buttons=[
                        [Button.inline("üíæ –ó–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç", data=f"finalize_{session_id}")],
                        [Button.inline("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", data="go_main_menu")]
                    ]
                )
                return

            next_question = random.choice(remaining_questions)
            buttons = [
                [Button.inline(ans.answer_text, data=f"ans_{session_id}_{next_question.id}_{ans.id}")]
                for ans in next_question.answers
            ]

            await bot_client.send_message(
                event.chat_id,
                f"‚ùì {next_question.question_text}",
                buttons=buttons
            )

        finally:
            session.close()



    @bot_client.on(events.CallbackQuery(pattern=r"^finalize_(\d+)$"))
    async def handle_finalize_test(event):
        session_id = int(event.data.decode('utf-8').split('_')[1])
        session = SessionLocal()

        try:
            test_session = session.query(UserTestSession).filter(
                UserTestSession.id == session_id
            ).first()

            if not test_session:
                await event.answer("‚ùå –°–µ—Å—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

            user_answers = session.query(UserAnswer).filter(
                UserAnswer.session_id == session_id
            ).all()

            total = len(user_answers)
            correct = sum(1 for ua in user_answers if ua.is_correct)
            incorrect = total - correct
            score = int((correct / total) * 100) if total > 0 else 0
            is_passed = score >= 70

            test_session.completed_at = datetime.utcnow()

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å–µ—Å—ñ—é
            previous_best = session.query(UserTestSession).filter(
                UserTestSession.user_id == test_session.user_id,
                UserTestSession.test_id == test_session.test_id,
                UserTestSession.id != test_session.id,
                UserTestSession.completed_at.isnot(None),
                UserTestSession.score.isnot(None)
            ).order_by(UserTestSession.score.desc()).first()

            result_message = ""

            if previous_best:
                if score > previous_best.score:
                    if previous_best.score == 100:
                        result_message += (
                            "üü¢ –í–∏ –≤–∂–µ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É 100% —É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—ñ.\n"
                            "üéØ –¶—å–æ–≥–æ —Ä–∞–∑—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç **–Ω–µ –±—É–¥–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ**, –±–æ –≤—ñ–Ω –Ω–µ –∫—Ä–∞—â–∏–π.\n\n"
                        )
                    else:
                        test_session.score = score
                        test_session.is_passed = is_passed
                        result_message += (
                            f"üìà –í–∏ –ø–æ–∫—Ä–∞—â–∏–ª–∏ —Å–≤—ñ–π –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({previous_best.score}%)!\n"
                            f"‚úÖ –ù–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.\n\n"
                        )
                else:
                    result_message += (
                        f"üîÅ –í–∞—à –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({previous_best.score}%) –±—É–≤ –∫—Ä–∞—â–∏–º –∞–±–æ —Ä—ñ–≤–Ω–∏–º.\n"
                        f"‚õî –ù–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.\n\n"
                    )
            else:
                test_session.score = score
                test_session.is_passed = is_passed
                result_message += "‚úÖ –ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n\n"

            session.commit()

            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥—Å—É–º–∫–∏
            result_message += (
                f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É:**\n\n"
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {correct}\n"
                f"‚ùå –ü–æ–º–∏–ª–∫–æ–≤–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {incorrect}\n"
                f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: **{score}%** ‚Äî {'‚úÖ –ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ' if test_session.is_passed else '‚ùå –ù–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ'}"
            )

            await event.delete()
            await bot_client.send_message(
                event.chat_id,
                result_message,
                buttons=[[Button.inline("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é", data="go_main_menu")]],
                parse_mode='markdown'
            )

        finally:
            session.close()
