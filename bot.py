import random
from telethon import TelegramClient, events, Button
from config import API_ID, API_HASH, BOT_TOKEN
from sqlalchemy import text
from auth.auth import register_user, check_authorization, authorize_user
from testing.test_logic import get_test_categories, get_random_question
from testing.models import TestCategory, Test, Question, Answer  # ‚Üê –¥–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
#---–Ü–º–ø–æ—Ä—Ç –±–∞–∑–∏-----
from utils.base import Base
from utils.database import engine, SessionLocal

#-------------------
Base.metadata.create_all(engine)



bot = TelegramClient('bot_session', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

WELCOME_TEXT = (
    "üëã –í—ñ—Ç–∞—é!\n\n"
    "–¶–µ –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è —Ç–∞ —Ç—Ä–æ—Ö–∏ —Ä–æ–∑–≤–∞–∂–∏—Ç–∏—Å—è.\n"
    "–©–æ–± –ø–æ—á–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start"
)

MAIN_MENU_BUTTONS = [
    [Button.text("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è", resize=True)],
    [Button.text("üìå –û—á—ñ–∫—É–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω—å", resize=True)]
]

REGISTRATION_BUTTONS = [
    [Button.text("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", resize=True), Button.text("‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è", resize=True)]
]

@bot.on(events.NewMessage(pattern='/start'))
async def start(event):
    telegram_id = event.sender_id
    username = event.sender.username
    full_name = f"{event.sender.first_name or ''} {event.sender.last_name or ''}".strip()

    session = engine.connect()
    result = session.execute(
        text("SELECT is_authorized FROM users WHERE telegram_id = :telegram_id"),
        {"telegram_id": telegram_id}
    ).scalar()
    session.close()

    if result:
        await event.reply(
            "üîπ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç —ñ–∑ –º–µ–Ω—é.",
            buttons=MAIN_MENU_BUTTONS
        )
    else:
        await event.reply(
            "ü§î –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –•–æ—á–µ—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å?",
            buttons=REGISTRATION_BUTTONS
        )

@bot.on(events.NewMessage(pattern='‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'))
async def register(event):
    telegram_id = event.sender_id
    username = event.sender.username
    full_name = f"{event.sender.first_name or ''} {event.sender.last_name or ''}".strip()

    if not check_authorization(telegram_id):
        register_user(telegram_id, username, full_name)
        authorize_user(telegram_id)  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ is_authorized=True
        await event.reply(
            "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –î—è–∫—É—é, —â–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è.",
            buttons=MAIN_MENU_BUTTONS
        )
    else:
        await event.reply("üîπ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.", buttons=MAIN_MENU_BUTTONS)

@bot.on(events.NewMessage(pattern='‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è'))
async def decline_registration(event):
    await event.reply("üö´ –í–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")

@bot.on(events.NewMessage(pattern='üìå –û—á—ñ–∫—É–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω—å'))
async def updates(event):
    await event.reply("üïë –ù–µ–∑–∞–±–∞—Ä–æ–º —Ç—É—Ç –∑'—è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏!")

# @bot.on(events.NewMessage(func=lambda e: e.is_private and e.text != '/start' 
#                           and e.text not in ['‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', '‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è', 'üìå –û—á—ñ–∫—É–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω—å']))
# async def greet_if_first_time(event):
#     await event.reply(WELCOME_TEXT)

@bot.on(events.NewMessage(pattern='üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è'))
async def testing_menu(event):
    categories = get_test_categories()
    if not categories:
        await event.reply("üòï –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–µ—Å—Ç—É.")
        return
    
    buttons = [[Button.text(cat.name, resize=True)] for cat in categories]
    await event.reply("üìö –û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:", buttons=buttons)

@bot.on(events.NewMessage)
async def handle_category_selection(event):
    session = SessionLocal()
    category = session.query(TestCategory).filter(TestCategory.name == event.text).first()
    if category:
        tests = session.query(Test).filter(Test.category_id == category.id).all()
        if not tests:
            await event.reply("üòï –í –æ–±—Ä–∞–Ω—ñ–π —Ç–µ–º—ñ –Ω–µ–º–∞—î —Ç–µ—Å—Ç—ñ–≤.")
            session.close()
            return
        
        test = random.choice(tests)
        question = get_random_question(test.id)
        if question:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∑–∞–º—ñ—Å—Ç—å –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
            # –î–ª—è –∫–æ–∂–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–æ–¥–∞—î–º–æ —ó—ó id —è–∫ callback_data
            buttons = [
                [Button.inline(ans.answer_text, data=f"answer_{ans.id}")]
                for ans in question.answers
            ]
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ id –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            await event.reply(
                f"‚ùì {question.question_text}", 
                buttons=buttons
            )
        else:
            await event.reply("üòï –í —Ç–µ—Å—Ç—ñ –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å.")
    session.close()

@bot.on(events.CallbackQuery(pattern=r"answer_(\d+)"))
async def handle_answer(event):
    answer_id = int(event.data.decode('utf-8').split('_')[1])
    
    session = SessionLocal()
    answer = session.query(Answer).filter(Answer.id == answer_id).first()
    
    if answer:
        if answer.is_correct:
            await event.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")  # –ü–æ–∫–∞–∑—É—î —Å–ø–ª–∏–≤–∞—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await bot.send_message(
                event.chat_id,
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {answer.answer_text}",
            )
        else:
            correct_answer = session.query(Answer).filter(
                Answer.question_id == answer.question_id,
                Answer.is_correct == True
            ).first()
            
            correct_text = correct_answer.answer_text if correct_answer else "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            await event.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")  # –ü–æ–∫–∞–∑—É—î —Å–ø–ª–∏–≤–∞—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await bot.send_message(
                event.chat_id,
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–∏ –æ–±—Ä–∞–ª–∏: {answer.answer_text}\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_text}",
            )
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
        await bot.send_message(
            event.chat_id,
            "–ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?",
            buttons=[Button.inline("–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è", data="next_question")]
        )
    
    session.close()

@bot.on(events.CallbackQuery(pattern=r"next_question"))
async def handle_next_question(event):
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è"
    await event.delete()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    categories = get_test_categories()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    category_buttons = [
        [Button.inline(cat.name, data=f"category_{cat.id}")]
        for cat in categories
    ]
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–æ–ª–æ–≤–Ω—É"
    category_buttons.append([Button.inline("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", data="go_home")])
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è–º –≤–∏–±—Ä–∞—Ç–∏ —Ç–µ–º—É
    await bot.send_message(
        event.chat_id,
        "üìö –í–∏–±–µ—Ä—ñ—Ç—å –∑ –º–µ–Ω—é —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:",
        buttons=category_buttons
    )

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–æ–ª–æ–≤–Ω—É"
@bot.on(events.CallbackQuery(pattern=r"go_home"))
async def go_home(event):
    await event.delete()  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Ç–µ–º–∏
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await bot.send_message(
        event.chat_id,
        "üîπ –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç —ñ–∑ –º–µ–Ω—é.",
        buttons=MAIN_MENU_BUTTONS
    )

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —á–µ—Ä–µ–∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@bot.on(events.CallbackQuery(pattern=r"category_(\d+)"))
async def handle_category_inline_selection(event):
    # –û—Ç—Ä–∏–º—É—î–º–æ id –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ callback_data
    category_id = int(event.data.decode('utf-8').split('_')[1])
    
    session = SessionLocal()
    category = session.query(TestCategory).filter(TestCategory.id == category_id).first()
    
    if category:
        tests = session.query(Test).filter(Test.category_id == category.id).all()
        if not tests:
            await event.answer("üòï –í –æ–±—Ä–∞–Ω—ñ–π —Ç–µ–º—ñ –Ω–µ–º–∞—î —Ç–µ—Å—Ç—ñ–≤.")
            session.close()
            return
        
        test = random.choice(tests)
        question = get_random_question(test.id)
        
        if question:
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            await event.delete()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            buttons = [
                [Button.inline(ans.answer_text, data=f"answer_{ans.id}")]
                for ans in question.answers
            ]
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∏—Ç–∞–Ω–Ω—è–º —Ç–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            await bot.send_message(
                event.chat_id,
                f"‚ùì {question.question_text}",
                buttons=buttons
            )
        else:
            await event.answer("üòï –í —Ç–µ—Å—Ç—ñ –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å.")
    else:
        await event.answer("üòï –ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    
    session.close()

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç"
@bot.on(events.NewMessage(pattern='üõë –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç'))
async def finish_test(event):
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –º–µ–Ω—é —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    categories = get_test_categories()
    
    if not categories:
        await event.reply("üòï –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–µ—Å—Ç—É.")
        return
    
    buttons = [[Button.text(cat.name, resize=True)] for cat in categories]
    await event.reply("üìö –û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:", buttons=buttons)

def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    bot.run_until_disconnected()

if __name__ == '__main__':
    main()
