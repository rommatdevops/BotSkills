from telethon import TelegramClient, events, Button
from config import API_ID, API_HASH, BOT_TOKEN
from auth.auth import register_user, check_authorization, authorize_user
from auth.models import Base
from utils.database import engine
from sqlalchemy import text

Base.metadata.create_all(engine)

bot = TelegramClient('bot_session', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

WELCOME_TEXT = (
    "üëã –í—ñ—Ç–∞—é!\n\n"
    "–¶–µ –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è —Ç–∞ —Ç—Ä–æ—Ö–∏ —Ä–æ–∑–≤–∞–∂–∏—Ç–∏—Å—è.\n"
    "–©–æ–± –ø–æ—á–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start"
)

MENU_BUTTON = [
    [Button.text("üìå –û—á—ñ–∫—É–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω—å", resize=True)]
]

REGISTRATION_BUTTONS = [
    [Button.text("‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", resize=True), Button.text("‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è", resize=True)]
]

@bot.on(events.NewMessage(pattern='/start'))
async def start(event):
    telegram_id = event.sender_id
    username = event.sender.username
    full_name = f"{event.sender.first_name or ''} {event.sender.last_name or ''}".strip()

    session = engine.connect()
    result = session.execute(
        text("SELECT is_authorized FROM users WHERE telegram_id = :telegram_id"),
        {"telegram_id": telegram_id}
    ).scalar()
    session.close()

    if result:
        await event.reply(
            "üîπ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç —ñ–∑ –º–µ–Ω—é.",
            buttons=MENU_BUTTON
        )
    else:
        await event.reply(
            "ü§î –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –•–æ—á–µ—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å?",
            buttons=REGISTRATION_BUTTONS
        )

@bot.on(events.NewMessage(pattern='‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'))
async def register(event):
    telegram_id = event.sender_id
    username = event.sender.username
    full_name = f"{event.sender.first_name or ''} {event.sender.last_name or ''}".strip()

    if not check_authorization(telegram_id):
        register_user(telegram_id, username, full_name)
        authorize_user(telegram_id)  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ is_authorized=True
        await event.reply(
            "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –î—è–∫—É—é, —â–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è.",
            buttons=MENU_BUTTON
        )
    else:
        await event.reply("üîπ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.", buttons=MENU_BUTTON)

@bot.on(events.NewMessage(pattern='‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è'))
async def decline_registration(event):
    await event.reply("üö´ –í–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")

@bot.on(events.NewMessage(pattern='üìå –û—á—ñ–∫—É–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω—å'))
async def updates(event):
    await event.reply("üïë –ù–µ–∑–∞–±–∞—Ä–æ–º —Ç—É—Ç –∑'—è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏!")

@bot.on(events.NewMessage(func=lambda e: e.is_private and e.text != '/start' 
                          and e.text not in ['‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', '‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è', 'üìå –û—á—ñ–∫—É–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω—å']))
async def greet_if_first_time(event):
    await event.reply(WELCOME_TEXT)

def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    bot.run_until_disconnected()

if __name__ == '__main__':
    main()
